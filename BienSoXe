# Thêm các phép toán cộng, trừ, nhân, chia để có kết quả bằng số cuối cùng


using System;
using System.Data;
using System.Xml;

public class Program
{
    public static void Main()
    {
        int[] a = new int[5] { 7,3,1,3,2};
        char[] o = new char[] { '+', '-', '*','/'};
        var res = a[4];
        var step1 = 0.0;
        var step2 = 0.0;
        var finalRes = 0.0;

        for (var i1 =0; i1 < 4; i1++)
        {
            for (var i2 = 0; i2 < 4; i2++)
            {
                for (var i3 = 0; i3 < 4; i3++)
                {
                   if (o[i1] == '*' || o[i1] == '/')
                    { 
                        step1 = Operation(a[0], a[1], o[i1]);

                        if (o[i2] == '*' || o[i2] == '/')
                        {
                            step2 = Operation(step1, a[2], o[i2]);
                            finalRes = Operation(step2, a[3], o[i3]);
                        }
                        else
                        {
                            if (o[i3] == '*' || o[i3] == '/')
                            {
                                step2 = Operation(a[2], a[3], o[i3]);
                                finalRes = Operation(step1, step2, o[i2]);
                            }
                            else
                            {
                                step2 = Operation(step1, a[2], o[i2]);
                                finalRes = Operation(step2, a[3], o[i3]);
                            }
                        }
                    }
                   else
                    {
                        if (o[i2] == '*' || o[i2] == '/')
                        {
                            step1 = Operation(a[1], a[2], o[i2]);

                            if (o[i3] == '*' || o[i3] == '/')
                            {
                                step2 = Operation(step1, a[3], o[i3]);
                                finalRes = Operation(a[0], step2, o[i1]);
                            }
                            else
                            {
                                step2 = Operation(a[0], step1, o[i1]);
                                finalRes = Operation(step2, a[3], o[i3]);
                            }

                        }
                        else
                        {
                            if (o[i3] == '*' || o[i3] == '/')
                            {
                                step1 = Operation(a[2], a[3], o[i3]);
                                step2 = Operation(a[0], a[1], o[i1]);
                                finalRes = Operation(step1, step2, o[i2]);
                            }
                            else
                            {
                                step1 = Operation(a[0], a[1], o[i1]);
                                step2 = Operation(step1, a[2], o[i2]);
                                finalRes = Operation(step2, a[3], o[i3]);
                            }
                        }
                    }

                    if (finalRes == res)
                    {
                        var opes = a[0].ToString() + o[i1].ToString() + a[1].ToString() + o[i2].ToString() + a[2].ToString() + o[i3].ToString() + a[3].ToString();
                        Console.WriteLine("out:{0}", opes);
                    }
                }
            }

        }
    }

    static double Operation(double input1, double input2, char sym)
    {
        if (sym == '+')
            return input1 + input2;
        
        if (sym == '-')
            return input1 - input2;

        if (sym == '*')
            return input1 * input2;
        else
            return input1 / input2;
    }

    static void SquareRoot(double input, double accuracy, int powerIndex)
    {
        if (powerIndex < 1)
        {
            Console.WriteLine("Invalid powerIndex");
            return;
        }

        var highBare = input / 2;
        var output = 1.0;
        var lowBare = 0.0;

        while (true)
        {
            var newDel = Pow(output, powerIndex) - input;
            if (newDel > 0)
            {
                highBare = output;
            }
            else
            {
                lowBare = output;
            }

            if (highBare - lowBare > 2 * accuracy)
            {
                output = (highBare + lowBare) / 2;
                continue;
            }
            else
            {
                Console.WriteLine("out:{0}", output);
                break;
            }
        }
    }

    static double Pow(double input, int powIndex)
    {
        var output = 1.0;
        for(var i = 0; i < powIndex; i++)
        {
            output *= input;
        }

        return output;
    }
}
