# GCPD (Greatest Common Prime Divisor) is defined as the largest prime number that divides both given positive integers. Your task is to find GCPD of the given integers a and b.
# Example
# For a = 12 and b = 18, the output should be greatestCommonPrimeDivisor(a, b) = 3;
# For a = 12 and b = 13, the output should be greatestCommonPrimeDivisor(a, b) = -1.
# Input/Output
# [execution time limit] 0.5 seconds
# [input] integer a
# Guaranteed constraints: 2 ≤ a ≤ 150.
# [input] integer b
# Guaranteed constraints: 2 ≤ b ≤ 150.
# [output] integer
# GCPD of a and b or -1 if it doesn't exist.
#######

using System;
using System.Collections.Generic;
					
public class Program
{
	public static void Main()
	{
		var a = 100;
		var b = 140;
		var factorsA = FindFactorPrimes(a);
		
		var i = 0;
		int result = -1;
		while(i < factorsA.Count)
		{
			if ((b % factorsA[i]) == 0)
			{
				result = factorsA[i];
			}
			i++;
		}
		
		Console.WriteLine("Res: {0}", result);
	}
	
	static List<int> FindFactorPrimes(int n)
	{
		var factors = new List<int>();
		var i = 2;
		
		while (!IsPrime(n))
		{
			if (IsPrime(i) && (n % i == 0))
			{
				factors.Add(i);
				n = n / i;
			}
			else
			{
				i++;
			}
		}
		 
		factors.Add(n);
		return factors;
	}
	
	
	static bool IsPrime(int n)
	{
		if (n == 0 || n == 1)
		{
			return false;
		}
		
		if ( n == 2 || n == 3)
		{
			return true;
		}
		
		var m = n/2;
		
		for (var i = 2; i <= m; i++)
		{
			if (n % i == 0)
			{
				return false;
			}
		}
		return true;
	}
}
